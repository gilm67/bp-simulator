// lib/sheets.ts
import { google } from "googleapis";
import { z } from "zod";
import { DateTime } from "luxon"; // âœ… Zurich timezone

// ================== CONFIG ==================
const SHEET_ID = process.env.SHEET_ID!;
const CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL!;
const PRIVATE_KEY =
  process.env.GOOGLE_PRIVATE_KEY_B64
    ? Buffer.from(process.env.GOOGLE_PRIVATE_KEY_B64, "base64").toString("utf8")
    : process.env.GOOGLE_PRIVATE_KEY!;

const JOBS_RANGE = "BP_Entries!A:Z";

// Schema for Job Row
const JobSchema = z.object({
  id: z.string(),
  title: z.string(),
  role: z.string(),
  location: z.string(),
  market: z.string(),
  seniority: z.string(),
  summary: z.string(),
  description: z.string(),
  confidential: z.string(),
  active: z.string(),
  createdAt: z.string(),
});

export type Job = z.infer<typeof JobSchema>;

// ================== CORE ==================
export async function getSheetsClient() {
  const auth = new google.auth.JWT({
    email: CLIENT_EMAIL,
    key: PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });
  return google.sheets({ version: "v4", auth });
}

// Append a job row
export async function appendJob(data: Omit<Job, "id" | "createdAt" | "active">) {
  const sheets = await getSheetsClient();

  const id = Date.now().toString();
  const createdAt = DateTime.now()
    .setZone("Europe/Zurich")
    .toFormat("yyyy-MM-dd HH:mm:ss");

  const row: Job = {
    id,
    createdAt,
    active: "TRUE",
    ...data,
  };

  await sheets.spreadsheets.values.append({
    spreadsheetId: SHEET_ID,
    range: JOBS_RANGE,
    valueInputOption: "USER_ENTERED",
    requestBody: {
      values: [
        [
          row.id,
          row.title,
          row.role,
          row.location,
          row.market,
          row.seniority,
          row.summary,
          row.description,
          row.confidential,
          row.active,
          row.createdAt,
        ],
      ],
    },
  });

  return id;
}

// Get all jobs
export async function getJobs(): Promise<Job[]> {
  const sheets = await getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: JOBS_RANGE,
  });

  const rows = res.data.values || [];
  const [header, ...data] = rows;
  if (!header) return [];

  return data.map((r) => {
    const row = {
      id: r[0] || "",
      title: r[1] || "",
      role: r[2] || "",
      location: r[3] || "",
      market: r[4] || "",
      seniority: r[5] || "",
      summary: r[6] || "",
      description: r[7] || "",
      confidential: r[8] || "",
      active: r[9] || "",
      createdAt: r[10] || "",
    };
    return JobSchema.parse(row);
  });
